{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/fritz/Projects/AustinConservationProject/acp-app/src/EventsComponent.js\";\nimport React, { Component } from \"react\";\nimport Calendar from 'react-calendar';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Modal from 'react-bootstrap/Modal';\nimport './css/Calendar.css';\nimport './css/Events.css';\nimport data from './content_json/events.json';\n/*\nclass to encapsulate events, is passed between calendar and EventTicker\nto populate Modals\n*/\n\nclass Event {\n  constructor(name, description, day, month, year) {\n    this.name = name;\n    this.date = new Date(year, month - 1, day);\n    this.description = description;\n  }\n\n}\n/*\ncomponent to be displayed on a calendar tile\n*/\n\n\nclass EventTicker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      event_name: null,\n      event_date: null,\n      event_description: null,\n      show_modal: false\n    };\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleOpen(event) {\n    this.setState({\n      show_modal: true\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      show_modal: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"inline-block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Modal, {\n        className: \"nominate-modal\",\n        size: \"lg\",\n        show: this.state.show_modal,\n        onHide: this.handleClose,\n        centered: true,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          className: \"body-24pt\",\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: this.props.event.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          className: \"body-16pt\",\n          children: this.props.event.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n        placement: \"right\",\n        delay: {\n          show: 100,\n          hide: 0\n        },\n        overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n          id: \"button-tooltip\",\n          children: this.props.event.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 20\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\",\n          onClick: () => this.handleOpen(this.props.event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass EventsComponent extends Component {\n  constructor(props) {\n    super(props); //read in data from json and convert to event objects\n\n    this.data = [];\n\n    for (var i = 0; i < data.length; i++) {\n      let name = data[i]['name'];\n      let desc = data[i]['description'];\n      let day = data[i]['day'];\n      let month = data[i]['month'];\n      let year = data[i]['year'];\n      let my_event = new Event(name, desc, day, month, year);\n      this.data.push(my_event);\n    } //bind methods to \"this\"\n\n\n    this.isEventDate = this.isEventDate.bind(this);\n  }\n  /*\n  returns components corresponding to a given date, null otherwise\n  */\n\n\n  isEventDate(date) {\n    //create list of tickers to be displayed on a date tile\n    var event_ticker_list = [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 30\n    }, this)];\n\n    for (var i = 0; i < this.data.length; i++) {\n      if (date.getTime() === this.data[i].date.getTime()) {\n        event_ticker_list.push( /*#__PURE__*/_jsxDEV(EventTicker, {\n          event: this.data[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 32\n        }, this));\n      }\n    } //filler if there are no events on this date\n\n\n    if (event_ticker_list.length === 1) {\n      event_ticker_list.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot\",\n        style: {\n          backgroundColor: \"#00000000\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 30\n      }, this));\n    }\n\n    return event_ticker_list;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-24pt page-title\",\n        children: \"Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blue-yellow-bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n        style: {\n          margin: \"auto\"\n        },\n        tileContent: ({\n          activeStartDate,\n          date,\n          view\n        }) => this.isEventDate(date),\n        onDrillDown: ({\n          activeStartDate,\n          view\n        }) => null,\n        onDrillUp: ({\n          activeStartDate,\n          view\n        }) => null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default EventsComponent;","map":{"version":3,"sources":["/home/fritz/Projects/AustinConservationProject/acp-app/src/EventsComponent.js"],"names":["React","Component","Calendar","Tooltip","OverlayTrigger","Modal","data","Event","constructor","name","description","day","month","year","date","Date","EventTicker","props","state","event_name","event_date","event_description","show_modal","handleOpen","bind","handleClose","event","setState","render","display","show","hide","EventsComponent","i","length","desc","my_event","push","isEventDate","event_ticker_list","getTime","backgroundColor","margin","activeStartDate","view"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\n\nimport Calendar from 'react-calendar';\n\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Modal from 'react-bootstrap/Modal';\n\nimport './css/Calendar.css';\nimport './css/Events.css';\nimport data from './content_json/events.json';\n\n/*\nclass to encapsulate events, is passed between calendar and EventTicker\nto populate Modals\n*/\nclass Event {\n  constructor(name, description, day, month, year){\n    this.name = name;\n    this.date = new Date(year, month-1, day);\n    this.description = description;\n  }\n}\n\n/*\ncomponent to be displayed on a calendar tile\n*/\nclass EventTicker extends Component{\n  constructor(props){\n    super(props)\n\n    this.state = {\n      event_name:null,\n      event_date:null,\n      event_description:null,\n      show_modal:false\n    }\n\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleOpen(event){\n    this.setState({\n      show_modal:true\n    })\n  }\n\n  handleClose(){\n    this.setState({\n      show_modal:false\n    })\n  }\n\n  render(){\n    return(\n      <div style={{display:\"inline-block\"}}>\n        <Modal className=\"nominate-modal\" size=\"lg\" show={this.state.show_modal} onHide={this.handleClose} centered>\n          <Modal.Header className=\"body-24pt\" closeButton>\n            <Modal.Title>{this.props.event.name}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body className=\"body-16pt\">\n            {this.props.event.description}\n          </Modal.Body>\n        </Modal>\n\n        <OverlayTrigger\n          placement=\"right\"\n          delay={{ show: 100, hide: 0 }}\n          overlay={\n                   <Tooltip id=\"button-tooltip\">\n                     {this.props.event.name}\n                   </Tooltip>\n                 }\n        >\n          <div className=\"dot\" onClick={()=>this.handleOpen(this.props.event)}>\n          </div>\n        </OverlayTrigger>\n      </div>\n    )\n  }\n}\n\nclass EventsComponent extends Component{\n\n  constructor(props){\n    super(props);\n\n    //read in data from json and convert to event objects\n    this.data = []\n\n    for(var i = 0; i < data.length; i++){\n\n\n      let name = data[i]['name']\n      let desc = data[i]['description']\n      let day = data[i]['day']\n      let month = data[i]['month']\n      let year = data[i]['year']\n\n      let my_event = new Event(name, desc, day, month, year)\n\n      this.data.push(my_event)\n    }\n\n    //bind methods to \"this\"\n    this.isEventDate = this.isEventDate.bind(this);\n  }\n\n  /*\n  returns components corresponding to a given date, null otherwise\n  */\n  isEventDate(date){\n\n    //create list of tickers to be displayed on a date tile\n    var event_ticker_list = [<br/>]\n    for(var i = 0; i < this.data.length; i++){\n      if(date.getTime() === this.data[i].date.getTime()){\n        event_ticker_list.push(<EventTicker event = {this.data[i]}/>)\n      }\n    }\n\n    //filler if there are no events on this date\n    if(event_ticker_list.length === 1){\n      event_ticker_list.push(<div className=\"dot\" style={{backgroundColor:\"#00000000\"}}/>)\n    }\n\n    return event_ticker_list;\n  }\n\n  render(){\n    return(\n      <div>\n        <p className=\"text-24pt page-title\">\n           Events\n        </p>\n        <div className=\"blue-yellow-bar\"/>\n        <Calendar\n          style={{margin:\"auto\"}}\n          tileContent={({ activeStartDate, date, view }) => this.isEventDate(date)}\n          onDrillDown={({ activeStartDate, view }) => null}\n          onDrillUp={({ activeStartDate, view })=>null}/>\n      </div>\n    )\n  }\n}\n\nexport default EventsComponent;\n"]},"metadata":{},"sourceType":"module"}